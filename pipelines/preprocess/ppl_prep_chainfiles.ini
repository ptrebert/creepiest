[Run]
load_path= /home/pebert/work/code/mpggit/creepiest/pipelines
load_name= preprocess.ppl_prep_chainfiles

[Pipeline]
name= PREPCHAINS
indir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chainfiles
refdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chromsizes
tempdir= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chainfiles/mkrecip
outnet= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chainfiles/rbest_net
outchain= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chainfiles/rbest_chain
outmap= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chainfiles/rbest_map
outidx= /TL/deep/fhgfs/projects/pebert/thesis/refdata/chainfiles/rbest_idx
encmd= /home/pebert/work/code/mpggit/creepiest/datasrc/encode/20160211_ENCODE_metadata.tsv
encds= /home/pebert/work/code/mpggit/creepiest/datasrc/encode/20160225_ENCDS_ids.json
targets= hg19 mm9

# following set of commands based on:
# http://genomewiki.ucsc.edu/index.php/HowTo:_Syntenic_Net_or_Reciprocal_Best (-> Reciprocal Best)

# filter for autosomes and minimum chain size (= one nucleosome) of 150
# the minScore of 1000 is set according the documentation of the chainNet tool,
# which uses a default minScore of 2000, but has to be run with non-default
# parameters (see below) to get close to symmetrical coverage in both target and query
filter= chainFilter -t={targetchroms} -q={querychroms} -minScore=1000 -zeroGap -tMinSize=150 -qMinSize=150 {{inputfile}} | gzip > {{outputfile}}
# take chain, switch, make target best chain
swap= chainStitchId {{inputfile}} stdout | chainSwap stdin stdout | chainSort stdin stdout | gzip -c > {{outputfile}}
# take target best chain, make target best net (that was the query assembly in the original input file)
qrybnet= chainPreNet {{inputfile}} ${refdir}/{TARGET[0]}.chrom.sizes ${refdir}/{QUERY[0]}.chrom.sizes stdout |
         chainNet -minSpace=1 -minScore=0 stdin ${refdir}/{TARGET[0]}.chrom.sizes ${refdir}/{QUERY[0]}.chrom.sizes stdout /dev/null |
         netSyntenic stdin stdout | gzip -c > {{outputfile}}
# take target best net AND target best chain, make reciprocal best chain (for the query assembly in the original input file)
qrybchain= netChainSubset {{inputfile}} ${tempdir}/swap/{TARGET[0]}_to_{QUERY[0]}.tbest.chain.gz stdout |
           chainStitchId stdin stdout | gzip -c > {{outputfile}}
# take reciprocal best chain and swap again to get reciprocal best chains for (original) target
trgbchain= chainSwap {{inputfile}} stdout | chainSort stdin stdout | gzip -c > {{outputfile}}
trgbnet= chainPreNet {{inputfile}} ${refdir}/{TARGET[0]}.chrom.sizes ${refdir}/{QUERY[0]}.chrom.sizes stdout |
         chainNet -minSpace=1 -minScore=0 stdin ${refdir}/{TARGET[0]}.chrom.sizes ${refdir}/{QUERY[0]}.chrom.sizes stdout /dev/null |
         netSyntenic stdin stdout | gzip -c > {{outputfile}}

qsymm= chain_symfilt.py --task qfilter -chf {{inputfile}} -chr {chrom} -o {{outputfile}}

mergeqsymm= gunzip -c {{inputfiles}} | sort -V -k 1,2 | gzip > {{outputfile}}
symmext= chain_symfilt.py --task symmext --map-file {{inputfile}} --query-sizes ${refdir}/{QUERY[0]}.chrom.sizes --output-file {{outputfile}}

sortmap= gunzip -c {inputfile} | sort -V -k 5 -k 1,2 -k 6,7 | awk '{{print $$0"\\t"NR}}' | gzip > {outputfile}

dumptrg= chain_symfilt.py --task maptobedgraph --map-file {inputfile} | sort -V -k 1,2 | gzip > {outputfile}
dumpqry= chain_symfilt.py --task maptobedgraph --query --map-file {inputfile} | sort -V -k 1,2 | gzip > {outputfile}

trgidx= creepiest.py -dmp ${EnvPaths:confdump}/convert --workers 5 convert --task map -i {{inputfile}} -o {{outputfile}} -og {TARGET[0]}/{QUERY[0]} -cs ${refdir}/{TARGET[0]}.chrom.sizes
qryidx= creepiest.py -dmp ${EnvPaths:confdump}/convert --workers 5 convert --task map --query -i {{inputfile}} -o {{outputfile}} -og {TARGET[0]}/{QUERY[0]} -cs ${refdir}/{QUERY[0]}.chrom.sizes

runall= touch {outputfile}



[Ruffus]
use_threads= True
jobs= 20
verbose= 3
history_file= ${EnvPaths:ruffushist}/${Pipeline:name}_hist.sqlite
log_file= ${EnvPaths:ruffuslog}/${Pipeline:name}_ruffus.log

[JobConfig]
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=5G,slots_free=4,tmp_free=5G,h=deep1[0123456789]*|deep2[0123456789]*
scriptdir= ${EnvPaths:ruffusdump}/chains
keepscripts= 1

[MemJobConfig]
workdir= ${EnvPaths:workdir}
outpath= ${EnvPaths:ruffusdump}
errpath= ${EnvPaths:ruffusdump}
native_spec= -l mem_free=25G,slots_free=2,tmp_free=5G,h=deep1[0123456789]*|deep2[0123456789]*
scriptdir= ${EnvPaths:ruffusdump}/chains
keepscripts= 1

